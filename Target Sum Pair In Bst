import java.util.*;

class Node {
    int data;
    Node left, right;

    public Node(int item) {
        data = item;
        left = right = null;
    }
}

class BinarySearchTree {
    Node constructBST(int[] arr, int start, int end, Node root) {
        if (start > end)
            return null;
        int mid = (start + end) / 2;

        if (root == null)
            root = new Node(arr[mid]);

        root.left = constructBST(arr, start, mid - 1, root.left);
        root.right = constructBST(arr, mid + 1, end, root.right);

        return root;

    }
}

public class Main {
    public static void main(String[] args) throws Throwable {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int arr[] = new int[n];
        for (int i = 0; i < n; i++) {
            arr[i] = sc.nextInt();
        }
        int target = sc.nextInt();

        Arrays.sort(arr);
        Node root = null;
        BinarySearchTree bst = new BinarySearchTree();
        root = bst.constructBST(arr, 0, n - 1, root);

        Accio A = new Accio();
        A.targetSum(root, target);

        sc.close();
    }
}

class Accio {
	HashSet<Integer> ans = new HashSet<>();
	HashMap<Integer,Integer> anss= new HashMap<>();
	public boolean find(Node root,int tar){
		if(root==null){
			return false;
		}
		if(ans.contains(tar-root.data)){
			int x=tar-root.data;
			if(x<root.data){
				anss.put(x,root.data);
			}else{
				anss.put(root.data,x);
			}
			
		}else
			ans.add(root.data);
		
		return find(root.left,tar)||find(root.right,tar);
	}
  
    
    public void targetSum(Node root, int tar)
    {
        // your code here
		find(root,tar);
		if(anss.isEmpty()==true){
			System.out.print(-1);
		}else{
			for(int i: anss.keySet()){
				System.out.println(i+" "+anss.get(i));
			}
		}

    }

}
